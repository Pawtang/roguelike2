{"version":3,"sources":["MainMenu.js","PlayerCreation.js","Shop.js","Inventory.js","utils/constants.js","utils/rngUtils.js","utils/mapGenerationUtils.js","Exploration.js","utils/playerMovement.js","GameArea.js","App.js","index.js"],"names":["MainMenu","props","gamestate","setGamestate","className","id","onClick","class","PlayerCreation","stats","setStats","updateStats","statIndex","direction","statsCopy","console","log","value","statCheck","reduce","totalValue","currentStat","narritives","type","name","placeholder","getNarritive","map","stat","idx","disabled","Shop","itemLibrary","helmet","description","itemType","steelsword","Inventory","inventoryItems","inventoryItemsWithInfo","inventoryItemId","inventoryItem","getItemInfoForInventoryItems","totalItems","length","i","push","draggable","INITIAL_STATS","TILE_COUNT","intGenerator","maxValue","Math","trunc","random","betweenGeneratorInteger","minValue","assignTileTexture","tileStyle","roomGenerator","nodeNumber","setPlayerLocation","room","initialNodes","n","verticalIndex","row","horizontalIndex","tileType","drawOpenSpace","boundaryType","assignBoundaryType","roomSize","hasBeenTraveled","tileNumber","roomProcessing","footPositions","tile","neighbors","getNeighborTileTypes","checkAllElementsInListEqualValue","wallcount","e","entranceRoll","exitRoll","entrance","exit","rowIndex","columnIndex","nodes","j","nodeIndex","node","sqrt","list","prev","current","Exploration","currentRoomNumber","rooms","setRooms","playerLocation","currentRoom","useState","inventorystate","setInventoryState","setPlayerLocationCb","location","handleMovementKeyDown","useCallback","preventDefault","code","movementHandler","React","useEffect","window","addEventListener","removeEventListener","style","display","gridTemplateColumns","gridTemplateRows","gap","width","height","GameArea","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.84baff3e.chunk.js","sourcesContent":["function MainMenu(props) {\r\n    const { gamestate, setGamestate } = props; //Object destructuring - has same name\r\n    return (\r\n        <div className=\"menu\">\r\n            <div className=\"menuHeader\">\r\n                <h1 id=\"title\">CYBER COWBOY 2077</h1>\r\n            </div>\r\n            <div className=\"flexcolumn center\">\r\n                <button onClick={() => setGamestate('creation')} class=\"menubtn\">\r\n                    New Game\r\n                </button>\r\n                <button class=\"menubtn\">Load Game</button>\r\n                <button class=\"menubtn\">Credits</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MainMenu;\r\n","const PlayerCreation = (props) => {\r\n    const { setGamestate, stats, setStats } = props;\r\n    const updateStats = (statIndex, direction, stats, setStats) => {\r\n        const statsCopy = [...stats];\r\n        console.log('click', `${statIndex}, ${direction}`);\r\n        if (direction === 'dec') {\r\n            statsCopy[statIndex].value = statsCopy[statIndex].value - 1;\r\n        } else if (direction === 'inc') {\r\n            statsCopy[statIndex].value = statsCopy[statIndex].value + 1;\r\n        }\r\n        setStats(statsCopy); // Set stats in higher level state;\r\n    };\r\n\r\n    const statCheck = () => {\r\n        return stats.reduce((totalValue, currentStat) => totalValue + currentStat.value, 0);\r\n    };\r\n\r\n    const narritives = {\r\n        default: \"You are average, you are nobody, you're a jack of all trades.\",\r\n        str: 'You were raised on beef and lard, pulling the plow on the farm in place of cattle. You never made it to school, you had fields to attend to. Your skin is leather-thick and sun cracked like rhinoceros hide.',\r\n        strdex: 'After years of being tortured by your peers, you began attending the inner-city boxing gym as a teenager. You learned to duck and dodge, but also hit the weights after practice, and ate plenty of oats.',\r\n        strint: '',\r\n        strchr: '',\r\n        strlck: '',\r\n        dex: 'Limber and light, you exceled in your college gymnastics team, where you competed all-around. You believe the best way to deal with your problems is to avoid them - literally.',\r\n        dexint: '',\r\n        dexchr: '',\r\n        dexlck: '',\r\n        int: '',\r\n        intchr: '',\r\n        intlck: '',\r\n        chr: \"You've found your way through life not by force or by skill, but by making close friends out of dangerous strangers. There's always a guy you know who can solve any problem you come accross.\",\r\n        chrlck: \"People would hate you if you weren't so damn charming. People are disbelieving that things just keep going right for you. They may express jealousy behind your back, but as soon as you start the conversation, they beam at you.\",\r\n        lck: \"You've somehow always managed to fail upwards in life. You're not particularily good at anything, but always seem to be in the right place at the right time.\",\r\n    };\r\n\r\n    const getNarritive = (stats) => {\r\n        switch (true) {\r\n            case stats[0].value > 15:\r\n                return narritives.str;\r\n            case stats[0].value > 10 && stats[1].value > 10:\r\n                return narritives.str;\r\n            default:\r\n                return narritives.chr;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"flexcolumn center\">\r\n            <div className=\"creation flexcolumn\">\r\n                <h1>Create a new character...</h1>\r\n\r\n                <div className=\"player-image flexcolumn\">\r\n                    <div className=\"flexrow\">\r\n                        <input type=\"text\" name=\"name\" id=\"name\" placeholder=\"enter character name\" />\r\n                    </div>\r\n                    <div className=\"narritive\">\r\n                        <p>{getNarritive(stats)}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"stat-wrapper\">\r\n                    <div className=\"flexcolumn center\">\r\n                        <div className=\"stat flexrow\">\r\n                            <p className=\"statname\">Available Points: {25 - statCheck()}</p>\r\n                            <div className=\"state-value\" id=\"available\">\r\n                                {}\r\n                            </div>\r\n                        </div>\r\n                        {\r\n                            stats.map((stat, idx) => {\r\n                                return (\r\n                                    <div className=\"stat flexrow\">\r\n                                        <p class=\"statname\">{stat.name}</p>\r\n                                        <button\r\n                                            class=\"statbtn\"\r\n                                            onClick={() => updateStats(idx, 'dec', stats, setStats)}\r\n                                            disabled={stats[idx].value === 0}\r\n                                        >\r\n                                            -\r\n                                        </button>{' '}\r\n                                        {/*attempt here to disabled the button functionality when its value is 0*/}\r\n                                        <div className=\"stat-value\" id={stat.id}>\r\n                                            {stat.value}\r\n                                        </div>\r\n                                        <button\r\n                                            class=\"statbtn\"\r\n                                            onClick={() => updateStats(idx, 'inc', stats, setStats)}\r\n                                            disabled={statCheck() >= 25}\r\n                                        >\r\n                                            +\r\n                                        </button>{' '}\r\n                                        {/*attempt here to disable button functionality when maxStats have been reached*/}\r\n                                    </div>\r\n                                );\r\n                            }) // my attempt at generalizing the stats\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"\">\r\n                <button className=\"inline-btn\">Reset ⭕</button>\r\n                <button onClick={() => setGamestate('exploration')} class=\"inline-btn\">\r\n                    Accept ✅\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PlayerCreation;\r\n","const Shop = () => {\r\n    return (\r\n        <div className=\"shop\">\r\n            <h2>This is the shop area</h2>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Shop;\r\n","const itemLibrary = {\r\n    //Contains all items\r\n    helmet: {\r\n        name: 'Steel Helm',\r\n        description: 'A cheap old helmet',\r\n        itemType: 'helmet',\r\n    },\r\n    steelsword: {\r\n        name: 'Steel Sword',\r\n        description: 'A cheap old sword',\r\n        itemType: 'steelsword',\r\n    },\r\n    // steelsword: {sprite: \"A SPRITE 2\", itemType: \"steelsword\"}\r\n};\r\n\r\nfunction getItemInfoForInventoryItems(inventoryItems) {\r\n    const inventoryItemsWithInfo = inventoryItems.map((inventoryItemId) => {\r\n        //IIFE, parameter is invenotoryItemID\r\n        const inventoryItem = itemLibrary[inventoryItemId];\r\n        return {\r\n            id: inventoryItemId,\r\n            ...inventoryItem,\r\n        };\r\n    });\r\n    return inventoryItemsWithInfo; //Return this to Inventory when function called from Inventory funct\r\n}\r\n\r\nconst Inventory = () => {\r\n    const inventoryItems = [\r\n        'helmet',\r\n        'steelsword',\r\n        'boots',\r\n        'cuirass',\r\n        'amulet',\r\n    ];\r\n    const inventoryItemsWithInfo = getItemInfoForInventoryItems(inventoryItems);\r\n    const totalItems = inventoryItems.length; //Redundant AF\r\n    for (let i = 0; i < 20 - totalItems; i++) {\r\n        inventoryItemsWithInfo.push('0');\r\n    }\r\n    return (\r\n        <div className=\"inventory\">\r\n            <div className=\"inventorycontainer flexrow\">\r\n                <div className=\"equipped\">\r\n                    <div className=\"equippeditem ring1\">Ring</div>\r\n                    <div className=\"equippeditem helmet\" id=\"\">\r\n                        Helmet\r\n                        <div\r\n                            class=\"sprite eq\"\r\n                            id=\"helmet\"\r\n                            draggable=\"true\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"equippeditem ring2\">Ring</div>\r\n                    <div className=\"equippeditem mainhand\" id=\"\">\r\n                        Main Hand\r\n                        <div\r\n                            class=\"sprite eq\"\r\n                            id=\"woodensword1\"\r\n                            draggable=\"true\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"equippeditem armor\" id=\"\">\r\n                        Armor\r\n                        <div\r\n                            class=\"sprite eq\"\r\n                            id=\"cuirass\"\r\n                            draggable=\"true\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"equippeditem offhand\" id=\"\">\r\n                        Off Hand\r\n                        <div\r\n                            class=\"sprite eq\"\r\n                            id=\"woodenshield\"\r\n                            draggable=\"true\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"equippeditem gloves\" id=\"\">\r\n                        Gloves\r\n                    </div>\r\n                    <div className=\"equippeditem boots\" id=\"\">\r\n                        Boots\r\n                        <div\r\n                            class=\"sprite eq\"\r\n                            id=\"boots\"\r\n                            draggable=\"true\"\r\n                        ></div>\r\n                    </div>\r\n                    <div className=\"equippeditem amulet\" id=\"\">\r\n                        Amulet\r\n                    </div>\r\n                </div>\r\n                <div className=\"itemgrid\">\r\n                    {inventoryItemsWithInfo.map((inventoryItem) => {\r\n                        if (inventoryItem === '0') {\r\n                            return <div className=\"invitem\" />;\r\n                        }\r\n                        const { itemType, id } = inventoryItem;\r\n                        return (\r\n                            <div className=\"invitem\" key={id}>\r\n                                <div\r\n                                    class=\"sprite\"\r\n                                    id={itemType}\r\n                                    draggable=\"true\"\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Inventory;\r\n","export const INITIAL_STATS = [\r\n    {\r\n        name: 'Strength 💪',\r\n        id: 'str',\r\n        value: 5,\r\n    },\r\n    {\r\n        name: 'Dexterity 🏃‍♂️',\r\n        id: 'dex',\r\n        value: 5,\r\n    },\r\n    {\r\n        name: 'Intelligence 📚',\r\n        id: 'int',\r\n        value: 5,\r\n    },\r\n    {\r\n        name: 'Charisma 🙂',\r\n        id: 'chr',\r\n        value: 5,\r\n    },\r\n    {\r\n        name: 'Luck 🎲',\r\n        id: 'lck',\r\n        value: 5,\r\n    },\r\n];\r\n\r\nexport const TILE_COUNT = 10;\r\nexport const NODE_COUNT = TILE_COUNT / 5;\r\nexport const DENSITY = 0.35;\r\nexport const MAX_RADIUS = TILE_COUNT / 10;\r\n","export const intGenerator = (maxValue) => Math.trunc(Math.random() * maxValue);\r\nexport const betweenGenerator = (minValue, maxValue) => intGenerator(maxValue - minValue) + minValue + Math.random();\r\nexport const betweenGeneratorInteger = (minValue, maxValue) => intGenerator(maxValue - minValue) + minValue;\r\n\r\nexport const assignTileTexture = (tileStyle) => {\r\n    if (tileStyle === 'open') {\r\n        return `floor${betweenGeneratorInteger(1, 3)}`;\r\n    } else if (tileStyle === 'wall') {\r\n        return 'wall';\r\n        // return `wall${betweenGeneratorInteger(1, 3)}`;\r\n    } else if (tileStyle === 'foot') {\r\n        return 'foot wall';\r\n    } else if (tileStyle === 'head') {\r\n        return 'head wall';\r\n    } else if (tileStyle === 'entrance') {\r\n        return 'entrance';\r\n    } else if (tileStyle === 'exit') {\r\n        return 'exit';\r\n    } else if (tileStyle === 'player') {\r\n        return 'player';\r\n    }\r\n};\r\n","import { DENSITY, MAX_RADIUS, TILE_COUNT } from './constants';\r\nimport { betweenGenerator, intGenerator, betweenGeneratorInteger, assignTileTexture } from './rngUtils';\r\n\r\nexport const roomGenerator = (nodeNumber, setPlayerLocation) => {\r\n    const room = [];\r\n    const roomSize = TILE_COUNT;\r\n    const initialNodes = [];\r\n\r\n    for (let n = 0; n < nodeNumber; n++) {\r\n        initialNodes.push([\r\n            intGenerator(TILE_COUNT - 1),\r\n            intGenerator(TILE_COUNT - 1),\r\n            betweenGenerator(2, MAX_RADIUS),\r\n        ]);\r\n    }\r\n\r\n    for (let verticalIndex = 0; verticalIndex < roomSize; verticalIndex++) {\r\n        const row = [];\r\n        for (let horizontalIndex = 0; horizontalIndex < roomSize; horizontalIndex++) {\r\n            let tileType = drawOpenSpace(initialNodes, verticalIndex, horizontalIndex);\r\n            if (tileType === 'wall') {\r\n                tileType = Math.random() < DENSITY ? 'wall' : 'open';\r\n            }\r\n\r\n            row.push({\r\n                boundaryType: assignBoundaryType(roomSize - 1, verticalIndex, horizontalIndex),\r\n                tileType,\r\n                hasBeenTraveled: false,\r\n                tileNumber: verticalIndex * roomSize + horizontalIndex,\r\n            });\r\n        }\r\n        room.push(row);\r\n    }\r\n    // return room;\r\n    return roomProcessing(room, roomSize, setPlayerLocation);\r\n};\r\n\r\nexport const roomProcessing = (room, roomSize, setPlayerLocation) => {\r\n    // console.log('room before', [...room]);\r\n    // tileStyle = tileType === 'wall' ? 'wall' : 'open';\r\n    let footPositions = [];\r\n    for (let i = 0; i < 3; i++) {\r\n        //Process 3 times\r\n        for (let verticalIndex = 0; verticalIndex < roomSize; verticalIndex++) {\r\n            for (let horizontalIndex = 0; horizontalIndex < roomSize; horizontalIndex++) {\r\n                let tile = room[verticalIndex][horizontalIndex];\r\n                if (tile.tileType === 'wall') {\r\n                    const neighbors = getNeighborTileTypes(room, verticalIndex, horizontalIndex, tile);\r\n                    if (checkAllElementsInListEqualValue(neighbors, 'open')) {\r\n                        tile.tileType = 'open';\r\n                    }\r\n                } else if (tile.tileType === 'open') {\r\n                    const neighbors = getNeighborTileTypes(room, verticalIndex, horizontalIndex, tile);\r\n                    let wallcount = 0;\r\n                    neighbors.map((e) => {\r\n                        if (e === 'wall') wallcount++;\r\n                    });\r\n                    if (wallcount >= neighbors.length - 1) tile.tileType = 'wall';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // console.log('room after', room);\r\n    for (let verticalIndex = 0; verticalIndex < roomSize; verticalIndex++) {\r\n        for (let horizontalIndex = 0; horizontalIndex < roomSize; horizontalIndex++) {\r\n            let tile = room[verticalIndex][horizontalIndex];\r\n            if (tile.tileType === 'wall') {\r\n                if (\r\n                    tile.boundaryType !== 'sw-corner' &&\r\n                    tile.boundaryType !== 'se-corner' &&\r\n                    tile.boundaryType !== 'south-edge' &&\r\n                    room[verticalIndex + 1][horizontalIndex].tileType === 'open'\r\n                ) {\r\n                    tile.tileStyle = assignTileTexture('foot');\r\n                    footPositions.push([verticalIndex, horizontalIndex]);\r\n                } else tile.tileStyle = assignTileTexture('wall');\r\n            }\r\n            if (tile.tileType === 'open') {\r\n                if (\r\n                    tile.boundaryType !== 'sw-corner' &&\r\n                    tile.boundaryType !== 'se-corner' &&\r\n                    tile.boundaryType !== 'south-edge' &&\r\n                    room[verticalIndex + 1][horizontalIndex].tileType === 'wall'\r\n                )\r\n                    tile.tileStyle = assignTileTexture('head');\r\n                else tile.tileStyle = assignTileTexture('open');\r\n            }\r\n        }\r\n    }\r\n\r\n    const entranceRoll = betweenGeneratorInteger(0, footPositions.length);\r\n    let exitRoll = betweenGeneratorInteger(0, footPositions.length);\r\n    while (exitRoll === entranceRoll) {\r\n        exitRoll = betweenGeneratorInteger(0, footPositions.length);\r\n    }\r\n    const entrance = room[footPositions[entranceRoll][0]][footPositions[entranceRoll][1]];\r\n    const exit = room[footPositions[exitRoll][0]][footPositions[exitRoll][1]];\r\n    // console.log(entrance, exit);\r\n    entrance.tileStyle = assignTileTexture('entrance');\r\n    exit.tileStyle = assignTileTexture('exit');\r\n    // setPlayerLocation((prevPlayerLocation) => footPositions[entranceRoll]);\r\n    // entrance.tileType = 'entrance';\r\n    // exit.tileType = 'exit';\r\n    console.log(room);\r\n    return room;\r\n};\r\n\r\nconst assignBoundaryType = (roomSize, rowIndex, columnIndex) => {\r\n    if (rowIndex === 0 && columnIndex === 0) {\r\n        return 'nw-corner';\r\n    } else if (rowIndex === 0 && columnIndex === roomSize) {\r\n        return 'ne-corner';\r\n    } else if (rowIndex === roomSize && columnIndex === 0) {\r\n        return 'sw-corner';\r\n    } else if (rowIndex === roomSize && columnIndex === roomSize) {\r\n        return 'se-corner';\r\n    }\r\n\r\n    if (rowIndex === 0 && columnIndex !== 0 && columnIndex !== roomSize) {\r\n        return 'north-edge';\r\n    } else if (rowIndex === roomSize && columnIndex !== 0 && columnIndex !== roomSize) {\r\n        return 'south-edge';\r\n    } else if (columnIndex === 0 && rowIndex !== 0 && rowIndex !== roomSize) {\r\n        return 'west-edge';\r\n    } else if (columnIndex === roomSize && rowIndex !== 0 && rowIndex !== roomSize) {\r\n        return 'east-edge';\r\n    }\r\n\r\n    return 'none';\r\n};\r\n\r\nconst drawOpenSpace = (nodes, i, j) => {\r\n    for (let nodeIndex = 0; nodeIndex < nodes.length; nodeIndex++) {\r\n        const node = nodes[nodeIndex];\r\n        const distance = Math.sqrt((i - node[0]) ** 2 + (j - node[1]) ** 2);\r\n        if (distance <= node[2]) {\r\n            return 'open';\r\n        }\r\n    }\r\n    return 'wall';\r\n};\r\n\r\n/* move this to util */\r\nconst checkAllElementsInListEqualValue = (list, value) =>\r\n    list.reduce((prev, current) => prev && current === value, true);\r\n\r\nconst getNeighborTileTypes = (room, verticalIndex, horizontalIndex, tile) => {\r\n    //NOTE - south is + 1 not - 1\r\n    if (tile.boundaryType === 'none') {\r\n        return [\r\n            room[verticalIndex - 1][horizontalIndex].tileType,\r\n            room[verticalIndex + 1][horizontalIndex].tileType,\r\n            room[verticalIndex][horizontalIndex - 1].tileType,\r\n            room[verticalIndex][horizontalIndex + 1].tileType,\r\n        ];\r\n    } else if (tile.boundaryType === 'nw-corner') {\r\n        return [room[verticalIndex][horizontalIndex + 1].tileType, room[verticalIndex + 1][horizontalIndex].tileType];\r\n    } else if (tile.boundaryType === 'ne-corner') {\r\n        return [room[verticalIndex][horizontalIndex - 1].tileType, room[verticalIndex + 1][horizontalIndex].tileType];\r\n    } else if (tile.boundaryType === 'sw-corner') {\r\n        return [room[verticalIndex][horizontalIndex + 1].tileType, room[verticalIndex - 1][horizontalIndex].tileType];\r\n    } else if (tile.boundaryType === 'se-corner') {\r\n        return [room[verticalIndex][horizontalIndex - 1].tileType, room[verticalIndex - 1][horizontalIndex].tileType];\r\n    } else if (tile.boundaryType === 'north-edge') {\r\n        return [\r\n            room[verticalIndex + 1][horizontalIndex].tileType,\r\n            room[verticalIndex][horizontalIndex - 1].tileType,\r\n            room[verticalIndex][horizontalIndex + 1].tileType,\r\n        ];\r\n    } else if (tile.boundaryType === 'south-edge') {\r\n        return [\r\n            room[verticalIndex - 1][horizontalIndex].tileType,\r\n            room[verticalIndex][horizontalIndex - 1].tileType,\r\n            room[verticalIndex][horizontalIndex + 1].tileType,\r\n        ];\r\n    } else if (tile.boundaryType === 'west-edge') {\r\n        return [\r\n            room[verticalIndex - 1][horizontalIndex].tileType,\r\n            room[verticalIndex + 1][horizontalIndex].tileType,\r\n            room[verticalIndex][horizontalIndex + 1].tileType,\r\n        ];\r\n    } else if (tile.boundaryType === 'east-edge') {\r\n        return [\r\n            room[verticalIndex - 1][horizontalIndex].tileType,\r\n            room[verticalIndex + 1][horizontalIndex].tileType,\r\n            room[verticalIndex][horizontalIndex - 1].tileType,\r\n        ];\r\n    }\r\n};\r\n\r\n// const drawPaths = (room, initialNodes) => {\r\n//     for (let current = 0; current < initialNodes.length - 1; current++) {\r\n//         // find path between nodes 1-0/2-1 and connect them\r\n//     }\r\n// };\r\n\r\nconst persistentMap = (parameters) => {\r\n    //list of objects, representing generated rooms\r\n};\r\n","import Inventory from './Inventory';\r\nimport React, { useState, useCallback } from 'react';\r\nimport { roomGenerator, roomProcessing } from './utils/mapGenerationUtils';\r\nimport { NODE_COUNT, TILE_COUNT } from './utils/constants';\r\nimport { assignTileTexture } from './utils/rngUtils';\r\nimport { movementHandler } from './utils/playerMovement';\r\n\r\nexport const Exploration = (props) => {\r\n    const { currentRoomNumber, rooms, setRooms, playerLocation, setPlayerLocation } = props;\r\n    const currentRoom = rooms[currentRoomNumber];\r\n    const [inventorystate, setInventoryState] = useState('invclosed');\r\n    const tileWidth = 800 / TILE_COUNT;\r\n    const setPlayerLocationCb = (location) => setPlayerLocation(location);\r\n    console.log(playerLocation);\r\n\r\n    const handleMovementKeyDown = useCallback((e) => {\r\n        movementHandler(e, setPlayerLocationCb, playerLocation);\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        window.addEventListener('keydown', handleMovementKeyDown);\r\n        return () => window.removeEventListener('keydown', handleMovementKeyDown);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"exploration\" id=\"mapArea\">\r\n            <div className=\"flexcolumn center\">\r\n                <div\r\n                    style={{\r\n                        display: 'grid',\r\n                        gridTemplateColumns: `repeat(${TILE_COUNT}, ${tileWidth}px)`,\r\n                        gridTemplateRows: `repeat(${TILE_COUNT}, ${tileWidth}px)`,\r\n                        gap: '0',\r\n                    }}\r\n                >\r\n                    {currentRoom &&\r\n                        currentRoom.map((row) =>\r\n                            row.map((tile) => (\r\n                                <div\r\n                                    style={{\r\n                                        width: `${tileWidth}px`,\r\n                                        height: `${tileWidth}px`,\r\n                                    }}\r\n                                    id={tile.tileNumber}\r\n                                    className={`maptile ${tile.tileStyle}`}\r\n                                >\r\n                                    {tile.tileType}\r\n                                </div>\r\n                            ))\r\n                        )}\r\n                </div>\r\n            </div>\r\n            {inventorystate === 'invopen' && <button onClick={() => setInventoryState('invclosed')}>Inventory</button>}\r\n            {inventorystate === 'invclosed' && <button onClick={() => setInventoryState('invopen')}>Inventory</button>}\r\n            <button onClick={() => setRooms([roomGenerator(NODE_COUNT, setPlayerLocation)])}>Re-Roll Map</button>\r\n            {inventorystate === 'invopen' && <Inventory />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Exploration;\r\n","import { TILE_COUNT } from './constants.js';\r\n\r\nexport const movementHandler = (e, setPlayerLocation) => {\r\n    e.preventDefault();\r\n    if (e.code === 'ArrowUp') {\r\n        console.log('up');\r\n        setPlayerLocation((playerLocation) =>\r\n            playerLocation[1] > 0 ? [playerLocation[0], playerLocation[1] - 1] : playerLocation\r\n        );\r\n    } else if (e.code === 'ArrowDown') {\r\n        console.log('down');\r\n        setPlayerLocation((playerLocation) =>\r\n            playerLocation[1] < TILE_COUNT ? [playerLocation[0], playerLocation[1] + 1] : playerLocation\r\n        );\r\n    } else if (e.code === 'ArrowLeft') {\r\n        console.log('left');\r\n        setPlayerLocation((playerLocation) =>\r\n            playerLocation[0] > 0 ? [playerLocation[0] - 1, playerLocation[1]] : playerLocation\r\n        );\r\n    } else if (e.code === 'ArrowRight') {\r\n        console.log('right');\r\n        setPlayerLocation((playerLocation) =>\r\n            playerLocation[0] < TILE_COUNT ? [playerLocation[0] + 1, playerLocation[1]] : playerLocation\r\n        );\r\n    }\r\n};\r\n","import React, { useState } from 'react';\r\n// import './Credits'\r\n// import './Inventory'\r\nimport MainMenu from './MainMenu';\r\nimport PlayerCreation from './PlayerCreation';\r\n// import './Encounter'\r\nimport Shop from './Shop';\r\nimport Exploration from './Exploration';\r\nimport { roomGenerator } from './utils/mapGenerationUtils';\r\nimport { INITIAL_STATS, NODE_COUNT } from './utils/constants';\r\n\r\nconst GameArea = (props) => {\r\n    const { gamestate, setGamestate } = props;\r\n    const [stats, setStats] = useState(INITIAL_STATS);\r\n    const [playerLocation, setPlayerLocation] = useState([0, 0]);\r\n    // const setPlayerLocationCallback = useCallback((e) => {\r\n    //     movementHandler(e, setPlayerLocationCb, playerLocation);\r\n    // }, []);\r\n    const [rooms, setRooms] = useState([roomGenerator([])]);\r\n    // const [rooms, setRooms] = useState([roomGenerator(NODE_COUNT, setPlayerLocation)]);\r\n    const [currentRoomNumber, setCurrentRoomNumber] = useState(0);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"header\"></div>\r\n            <div className=\"gameArea\">\r\n                {gamestate === 'mainmenu' && <MainMenu gamestate={gamestate} setGamestate={setGamestate} />}\r\n                {gamestate === 'exploration' && (\r\n                    <Exploration\r\n                        rooms={rooms}\r\n                        setRooms={setRooms}\r\n                        currentRoomNumber={currentRoomNumber}\r\n                        playerLocation={playerLocation}\r\n                        setPlayerLocation={setPlayerLocation}\r\n                    />\r\n                )}\r\n                {gamestate === 'shop' && <Shop />}\r\n                {/*removed gameState prop for now because we don't use it, we only want to pass around relevant information*/}\r\n                {gamestate === 'creation' && (\r\n                    <PlayerCreation setGamestate={setGamestate} stats={stats} setStats={setStats} />\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default GameArea;\r\n","import React, { useState } from 'react';\r\nimport GameArea from './GameArea';\r\n\r\nconst App = () => {\r\n    const [gamestate, setGamestate] = useState('mainmenu');\r\n\r\n    return (\r\n        <div className=\"container flexcolumn center\">\r\n            <div className=\"flexrow center\">\r\n                <button onClick={() => setGamestate('mainmenu')}>Main Menu</button>\r\n                <button onClick={() => setGamestate('exploration')}>Exploration</button>\r\n                <button onClick={() => setGamestate('shop')}>Shop</button>\r\n                <button onClick={() => setGamestate('creation')}>PlayerCreation</button>\r\n            </div>\r\n            <GameArea setGamestate={setGamestate} gamestate={gamestate} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport './css/sprites.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}